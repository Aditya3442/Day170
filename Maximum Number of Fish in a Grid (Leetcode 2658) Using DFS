class Solution {
    static final int[][] directions = {{0 , -1} , {0 , 1} , {-1 , 0} , {1 , 0}};
    public int dfs(int[][] grid , boolean[][] visited , int i , int j){
        if(i < 0 && i >= grid.length && j < 0 && j >= grid[0].length && grid[i][j] == 0 && visited[i][j])
           return 0;
        visited[i][j] = true;
        int ans = grid[i][j];
        for(int dir[] : directions){
            int newi = dir[0] + i;
            int newj = dir[1] + j;
            if(newi >= 0 && newi < grid.length && newj >= 0 && newj < grid[0].length && grid[newi][newj] != 0 && !visited[newi][newj])
                ans += dfs(grid , visited , newi , newj);
        }
        return ans;
    }
    public int findMaxFish(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int result = 0;
        boolean visited[][] = new boolean[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m ; j++){
                if(grid[i][j] != 0 && !visited[i][j]){
                     result = Math.max(result , dfs(grid , visited , i , j));
                }
            }
        }
        return result;
    }
}
